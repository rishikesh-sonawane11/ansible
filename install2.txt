---
- name: Install and check docker and apache version of remote hosts and get the report.
  hosts: localhost
  become: yes
  vars:
    filename: "device_report_{{ date }}.csv"

  tasks:
    - name: CSV - Generate output filename
      set_fact: date="{{lookup('pipe','date +%Y_%m_%d')}}"
      run_once: true
      register: name
    - debug:
        var: name

    - name: Purge the existing csv files if exists
      file:
        path: "/tmp/{{ filename }}"
        state: absent
      delegate_to: localhost

    - name: CSV - Create file and set the header
      lineinfile:
        dest: /tmp/{{ filename }}
        line:
          ansible_nodename,packages,version,state
        create: yes
        state: present
      delegate_to: localhost

    - name: for os_family=RedHat
      block:
        - name: Install the latest version of packages
          yum:
            name: "{{ item }}"
            state: latest
          loop:
            - httpd
            - docker
        - name: ensure services are started
          service:
            name: "{{ item }}"
            state: started
          register: status
          loop:
            - httpd
            - docker
        - debug: var=status

        - name: check version
          shell: httpd -v | grep version | awk -F '/' '{print $2}' | tr '(' ' ' | tr ')' ' '
          register: httpd
        - debug: var=httpd.stdout

        - name: check version
          shell: docker -v | grep version | awk '{print $3}' | tr ',' ' '
          register: docker
        - debug: var=docker.stdout

        - set_fact:
            httpd_tmp: >
              {{ ansible_nodename }},httpd,{{ httpd.stdout }},ACTIVE

        - debug: var=httpd_tmp

        - set_fact:
            docker_tmp: >
              {{ ansible_nodename }},docker,{{ docker.stdout }},ACTIVE

        - debug: var=docker_tmp

        - name: CSV - Write information into .csv file
          lineinfile:
            insertafter: EOF
            dest: /tmp/{{ filename }}
            line: "{{ item }}"
          loop:
            - "{{ httpd_tmp }}"
            - "{{ docker_tmp }}"
          delegate_to: localhost

      when: ansible_facts['os_family'] == "RedHat"

    - name: for os_family=debian
      block:
        - name: Install the latest version of all packages
          apt:
            name: "{{ item }}"
            state: latest
          loop:
            - apache2
            - docker

        - name: ensure services are started
          service:
            name: "{{ item }}"
            state: started
          register: status
          loop:
            - apache2
            - docker
        - debug: var=status

        - name: check version
          shell: apache2 -v | grep version | awk -F '/' '{print $2}' |  tr '(Ubuntu)' ' '
          register: apache2
        - debug: var=apache2.stdout

        - name: check version
          shell: docker -v | awk '{print $3}'| tr ',' ' '
          register: dockerd
        - debug: var=dockerd.stdout

        - set_fact:
            apache2_tmp: >
              {{ ansible_nodename }},apache2,{{ apache2.stdout }},ACTIVE

        - debug: var=apache2_tmp

        - set_fact:
            dockerd_tmp: >
              {{ ansible_nodename }},docker,{{ dockerd.stdout }},ACTIVE

        - debug: var=dockerd_tmp

        - name: CSV - Write information into .csv file
          lineinfile:
            insertafter: EOF
            dest: /tmp/{{ filename }}
            line: "{{ item }}"
          loop:
            - "{{ apache2_tmp }}"
            - "{{ dockerd_tmp }}"
          delegate_to: localhost

      when: ansible_facts['os_family'] == "Debian"




